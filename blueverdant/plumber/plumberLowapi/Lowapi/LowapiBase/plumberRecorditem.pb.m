// Code generated by protoc-gen-myrpc
// This is small json generator, json key will be p1, p2...
// default value of String is "" instead of null, default value of all number is 0, default value of Object and Array is nil
// all field with default value will be missing in generated json
// has_XXX is not supported in this Object, which is different with Protobuf
// Do not support Nested Message at this version
// DO NOT EDIT THIS FILE!
#import <Foundation/Foundation.h>
#import "plumberRecorditem.pb.h"



#pragma mark - plumberAppDeviceInfo
@implementation plumberInfo

- (instancetype)init
{
    self = [super init];
    if (self) {
        /*
        self.appName = @"";
        self.deviceType = @"";
        self.brand = @"";
        self.product = @"";
        self.sdkVersion = @"";
        self.appVersion = @"";
        self.imei = @"";
        self.channel = @"";
        self.mac = @"";
        self.rand = 0;
        self.androidId = @"";
        self.tmSerial = @"";
        self.randUUID = @"";
        self.systemVersion = @"";
        self.tp = @"";
         */
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (plumberInfo *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (plumberInfo *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    plumberInfo *result = [[plumberInfo alloc] init];
    return result;
}
@end

#pragma mark - plumberRecordItemElem
@implementation plumberRecordItemElem

- (instancetype)init
{
    self = [super init];
    if (self) {
        
    }
    return self;
}

- (NSMutableDictionary  *) toDict{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
   
    return dict;
}

- (NSData *) data{
    NSData *jsonData= [NSJSONSerialization dataWithJSONObject:[self toDict] options:kNilOptions error:nil];
    return jsonData;
}

+ (plumberRecordItemElem *) parseFromData:(NSData *)data error:(NSError **)error{
    NSError *err = nil;
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
    if (err != nil) {
        if (error != nil) {
            *error = err;
        }
        return nil;
    }
    if (dict == nil) {
        if (error != nil) {
            *error = [NSError errorWithDomain:@"MYRPC" code:-1  userInfo:nil];
        }
        return nil;
    }
    return [self parseFromDict:dict error:error];
}

+ (plumberRecordItemElem *) parseFromDict:(NSDictionary *)dict error:(NSError **)error{
    if (dict == nil || [dict count] == 0) {
    	return nil;
    }
    plumberRecordItemElem *result = [[plumberRecordItemElem alloc] init];
    
    return result;
}
@end


#pragma mark - plumberRecordItemListReq
@implementation plumberRecordItemListReq


@end
